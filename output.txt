config.js:
// config.js
let CONFIG = null;

function initializeConfig() {
    const decryptionPassword = 'uTWYpy0xqhGopS7VuIZD3w==';
    
    const ENCRYPTED_JSON_BIN_URL = 'U2FsdGVkX1/ODR6Pic5PoVLxZKgDtGMCC9KR71FvTZcJzA+jiwJqT4MNwyAA7bVxvSFlKFvki6Aq2lgljlFh0O1KTProO83x9JT/1pX9LpY=';
    const ENCRYPTED_MASTER_KEY = 'U2FsdGVkX198EZ8hJavIGTZ4rAfPeRhOGZvCjL/zQ7TPjwHl6Ye3/Bp8kLv45O9I5f4xQ2gE9i7i/kpjWsnGl6yrNPFJMAp5pTUrYIAYnnA=';

    function decryptAES(encryptedText, password) {
        try {
            const bytes = CryptoJS.AES.decrypt(encryptedText, password);
            return bytes.toString(CryptoJS.enc.Utf8);
        } catch (error) {
            console.error('Erro ao descriptografar:', error);
            return null;
        }
    }

    CONFIG = {
        JSON_BIN_URL: decryptAES(ENCRYPTED_JSON_BIN_URL, decryptionPassword),
        MASTER_KEY: decryptAES(ENCRYPTED_MASTER_KEY, decryptionPassword)
    };

    window.CONFIG = CONFIG;
    return CONFIG;
}

// Aguarda o carregamento do DOM e do CryptoJS
document.addEventListener('DOMContentLoaded', () => {
    if (typeof CryptoJS !== 'undefined') {
        initializeConfig();
    } else {
        console.error('CryptoJS não está carregado');
    }
});

export default CONFIG;

index.html:
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portal de Grupos</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="icon" type="image/x-icon" href="./favicon.ico">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    
    <script type="module" src="./config.js"></script>
    <script type="module" src="./main.js"></script>  
</head>
<body>
    <div class="container">
        <h1>Bem-vindo ao Portal de Grupos</h1>
        <p class="intro-text">
            Este portal utiliza as competências da BCCI (Base de Competências Criativas e Inovadoras) para agrupar os alunos de forma <strong>heterogênea</strong>. Ideal para professores de <strong>laboratórios Maker</strong>, <strong>Pensamento Computacional</strong> e <strong>Robótica</strong>, o sistema promove o equilíbrio entre as habilidades e características de cada aluno.
        </p>
        <div class="competency-container">
            <div class="competency-card">
                <h2>Curiosidade Artístico-Científica</h2>
                <p>Explorar formas criativas de pesquisa e registro, combinando ciência e arte para solucionar problemas.</p>
            </div>
            <div class="competency-card">
                <h2>Intenção Criativa</h2>
                <p>Encorajar os alunos a encontrar técnicas inovadoras para resolver problemas complexos.</p>
            </div>
            <div class="competency-card">
                <h2>Construção Colaborativa</h2>
                <p>Promover o trabalho em grupo, acolhendo ideias diversas para alcançar um objetivo comum.</p>
            </div>
            <div class="competency-card">
                <h2>Pensamento Complexo</h2>
                <p>Desenvolver a habilidade de combinar elementos diversos para criar soluções contextuais inovadoras.</p>
            </div>
        </div>
        <div class="process-section">
            <h2>Como funciona o processo?</h2>
            <p>
                O sistema avalia as respostas dos alunos em diferentes áreas (criatividade, colaboração, curiosidade e complexidade). 
                Com base nos dados, cada aluno é atribuído a um grupo que equilibra as competências, promovendo a heterogeneidade 
                e o aprendizado mútuo.
            </p>
        </div>
        <div class="button-container">
            <button onclick="openTeacherModal()">Área do Professor</button>
            <button onclick="redirectTo('student')">Área do Aluno</button>
        </div>
    </div>

    <!-- Modal para código do professor -->
    <!-- Modal para código do professor -->
    <div id="teacherModal" class="modal hidden">
        <div class="modal-content">
            <button id="closeModal" onclick="closeModal()" class="close-button">❌</button>
            <h2>Entrar ou Criar Sala</h2>
            <label for="teacherCodeInput">Código da Sala:</label>
            <input type="text" id="teacherCodeInput" placeholder="Digite o código da sala">
            <div class="modal-buttons">
                <button onclick="enterTeacherRoom()">Entrar</button>
                <button onclick="createTeacherRoom()">Criar Nova Sala</button>
            </div>
        </div>
    </div>
</body>
</html>


LICENSE:
Creative Commons Legal Code

CC0 1.0 Universal

    CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
    LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN
    ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
    INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
    REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS
    PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM
    THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED
    HEREUNDER.

Statement of Purpose

The laws of most jurisdictions throughout the world automatically confer
exclusive Copyright and Related Rights (defined below) upon the creator
and subsequent owner(s) (each and all, an "owner") of an original work of
authorship and/or a database (each, a "Work").

Certain owners wish to permanently relinquish those rights to a Work for
the purpose of contributing to a commons of creative, cultural and
scientific works ("Commons") that the public can reliably and without fear
of later claims of infringement build upon, modify, incorporate in other
works, reuse and redistribute as freely as possible in any form whatsoever
and for any purposes, including without limitation commercial purposes.
These owners may contribute to the Commons to promote the ideal of a free
culture and the further production of creative, cultural and scientific
works, or to gain reputation or greater distribution for their Work in
part through the use and efforts of others.

For these and/or other purposes and motivations, and without any
expectation of additional consideration or compensation, the person
associating CC0 with a Work (the "Affirmer"), to the extent that he or she
is an owner of Copyright and Related Rights in the Work, voluntarily
elects to apply CC0 to the Work and publicly distribute the Work under its
terms, with knowledge of his or her Copyright and Related Rights in the
Work and the meaning and intended legal effect of CC0 on those rights.

1. Copyright and Related Rights. A Work made available under CC0 may be
protected by copyright and related or neighboring rights ("Copyright and
Related Rights"). Copyright and Related Rights include, but are not
limited to, the following:

  i. the right to reproduce, adapt, distribute, perform, display,
     communicate, and translate a Work;
 ii. moral rights retained by the original author(s) and/or performer(s);
iii. publicity and privacy rights pertaining to a person's image or
     likeness depicted in a Work;
 iv. rights protecting against unfair competition in regards to a Work,
     subject to the limitations in paragraph 4(a), below;
  v. rights protecting the extraction, dissemination, use and reuse of data
     in a Work;
 vi. database rights (such as those arising under Directive 96/9/EC of the
     European Parliament and of the Council of 11 March 1996 on the legal
     protection of databases, and under any national implementation
     thereof, including any amended or successor version of such
     directive); and
vii. other similar, equivalent or corresponding rights throughout the
     world based on applicable law or treaty, and any national
     implementations thereof.

2. Waiver. To the greatest extent permitted by, but not in contravention
of, applicable law, Affirmer hereby overtly, fully, permanently,
irrevocably and unconditionally waives, abandons, and surrenders all of
Affirmer's Copyright and Related Rights and associated claims and causes
of action, whether now known or unknown (including existing as well as
future claims and causes of action), in the Work (i) in all territories
worldwide, (ii) for the maximum duration provided by applicable law or
treaty (including future time extensions), (iii) in any current or future
medium and for any number of copies, and (iv) for any purpose whatsoever,
including without limitation commercial, advertising or promotional
purposes (the "Waiver"). Affirmer makes the Waiver for the benefit of each
member of the public at large and to the detriment of Affirmer's heirs and
successors, fully intending that such Waiver shall not be subject to
revocation, rescission, cancellation, termination, or any other legal or
equitable action to disrupt the quiet enjoyment of the Work by the public
as contemplated by Affirmer's express Statement of Purpose.

3. Public License Fallback. Should any part of the Waiver for any reason
be judged legally invalid or ineffective under applicable law, then the
Waiver shall be preserved to the maximum extent permitted taking into
account Affirmer's express Statement of Purpose. In addition, to the
extent the Waiver is so judged Affirmer hereby grants to each affected
person a royalty-free, non transferable, non sublicensable, non exclusive,
irrevocable and unconditional license to exercise Affirmer's Copyright and
Related Rights in the Work (i) in all territories worldwide, (ii) for the
maximum duration provided by applicable law or treaty (including future
time extensions), (iii) in any current or future medium and for any number
of copies, and (iv) for any purpose whatsoever, including without
limitation commercial, advertising or promotional purposes (the
"License"). The License shall be deemed effective as of the date CC0 was
applied by Affirmer to the Work. Should any part of the License for any
reason be judged legally invalid or ineffective under applicable law, such
partial invalidity or ineffectiveness shall not invalidate the remainder
of the License, and in such case Affirmer hereby affirms that he or she
will not (i) exercise any of his or her remaining Copyright and Related
Rights in the Work or (ii) assert any associated claims and causes of
action with respect to the Work, in either case contrary to Affirmer's
express Statement of Purpose.

4. Limitations and Disclaimers.

 a. No trademark or patent rights held by Affirmer are waived, abandoned,
    surrendered, licensed or otherwise affected by this document.
 b. Affirmer offers the Work as-is and makes no representations or
    warranties of any kind concerning the Work, express, implied,
    statutory or otherwise, including without limitation warranties of
    title, merchantability, fitness for a particular purpose, non
    infringement, or the absence of latent or other defects, accuracy, or
    the present or absence of errors, whether or not discoverable, all to
    the greatest extent permissible under applicable law.
 c. Affirmer disclaims responsibility for clearing rights of other persons
    that may apply to the Work or any use thereof, including without
    limitation any person's Copyright and Related Rights in the Work.
    Further, Affirmer disclaims responsibility for obtaining any necessary
    consents, permissions or other rights required for any use of the
    Work.
 d. Affirmer understands and acknowledges that Creative Commons is not a
    party to this document and has no duty or obligation with respect to
    this CC0 or use of the Work.


main.js:
import CONFIG from './config.js';

const openTeacherModal = () => {
    document.getElementById('teacherModal').classList.remove('hidden');
};

const closeModal = () => {
    document.getElementById('teacherModal').classList.add('hidden');
};

// Funções de criptografia
function encryptData(text, key) {
    return CryptoJS.AES.encrypt(text, key).toString();
}


const enterTeacherRoom = () => {
    const teacherCode = document.getElementById('teacherCodeInput').value.trim();
    //const teacherCode = encryptData(teacherCodeValue, MASTER_KEY);

    if (!teacherCode) {
        alert("Por favor, insira um código válido.");
        return;
    }
    localStorage.setItem('teacherCode', teacherCode);
    window.location.href = './teacher/teachers.html';
};

async function waitForConfig() {
    return new Promise((resolve) => {
        const checkConfig = () => {
            if (window.CONFIG) {
                resolve(window.CONFIG);
            } else {
                setTimeout(checkConfig, 100);
            }
        };
        checkConfig();
    });
}

// Função atualizada para criar nova sala com criptografia
async function createTeacherRoom() {
    try {
        const oldTeacherCode = localStorage.getItem('teacherCode');
        const config = await waitForConfig();
        const JSON_BIN_URL = config.JSON_BIN_URL;
        const MASTER_KEY = config.MASTER_KEY;
        
        if (oldTeacherCode) {
            const confirmDelete = confirm(`ATENÇÃO: Você já possui uma sala ativa com o código ${oldTeacherCode}.\n\nAo criar uma nova sala, todos os dados da sala atual serão permanentemente apagados.\n\nDeseja continuar?`);
            
            if (!confirmDelete) {
                return;
            }

            const response = await axios.get(`${JSON_BIN_URL}/latest`, {
                headers: { "X-Master-Key": MASTER_KEY }
            });
            let data = response.data.record;
            
            if (data[oldTeacherCode]) {
                delete data[oldTeacherCode];
                await axios.put(JSON_BIN_URL, data, {
                    headers: {
                        "Content-Type": "application/json",
                        "X-Master-Key": MASTER_KEY
                    }
                });
            }
        }

        // Gera novo código e criptografa
        const newTeacherCode = Math.random().toString(36).substring(2, 8).toUpperCase();
        
        const newResponse = await axios.get(`${JSON_BIN_URL}/latest`, {
            headers: { "X-Master-Key": MASTER_KEY }
        });
        let newData = newResponse.data.record;

        // Cria nova estrutura usando o código criptografado
        newData[newTeacherCode] = {
            groups: {
                group1: [],
                group2: [],
                group3: [],
                group4: [],
                group5: [],
                group6: []
            }
        };

        await axios.put(JSON_BIN_URL, newData, {
            headers: {
                "Content-Type": "application/json",
                "X-Master-Key": MASTER_KEY
            }
        });

        localStorage.setItem('teacherCode', newTeacherCode);
        alert(`Nova sala criada com sucesso!\nSeu novo código é: ${newTeacherCode}`);
        window.location.href = './teacher/teachers.html';
    } catch (error) {
        console.error('Erro ao criar nova sala:', error);
        alert('Ocorreu um erro ao criar a nova sala. Por favor, tente novamente.');
    }
}

function redirectTo(role) {
    if (role === 'student') {
        window.location.href = './student/students.html';
    }
}

// Exporta as funções para o objeto `window`
window.openTeacherModal = openTeacherModal;
window.closeModal = closeModal;
window.enterTeacherRoom = enterTeacherRoom;
window.createTeacherRoom = createTeacherRoom;
window.redirectTo = redirectTo;

student/students.html:
<!DOCTYPE html>
<!--students.html-->
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Laboratório Maker - Perfil do Aluno</title>
    <link rel="stylesheet" href="styles.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <script type="module" src="../config.js"></script>
</head>
<body>
    <div class="container">
        <h1>Laboratório Maker</h1>
        <form id="studentForm">
            <label for="studentName">Seu Nome:</label>
            <input type="text" id="studentName" placeholder="Digite seu nome completo" required>
            
            <label for="teacherCode">Código da Turma:</label>
            <input type="text" id="teacherCode" placeholder="Digite o código da turma" required>
            
            <h2>Conte um pouco sobre você:</h2>
            
            <!-- Curiosidade Artístico-Científica -->
            <label>1. Quando você vê algo interessante (objeto, experiência ou arte), você:</label>
            <select id="question1" required>
                <option value="1">Prefiro não mexer para não estragar</option>
                <option value="2">Observo com atenção como funciona</option>
                <option value="3">Pesquiso mais sobre o assunto</option>
                <option value="4">Faço testes e experimentos para entender melhor</option>
            </select>

            <label>2. Em uma feira de ciências, o que você mais gosta de fazer?</label>
            <select id="question2" required>
                <option value="1">Prefiro só assistir as apresentações</option>
                <option value="2">Gosto de fazer anotações sobre o que vejo</option>
                <option value="3">Faço perguntas sobre os projetos</option>
                <option value="4">Adoro criar e apresentar experimentos</option>
            </select>

            <!-- Intenção Criativa -->
            <label>3. Quando precisa resolver um problema novo, você:</label>
            <select id="question3" required>
                <option value="1">Espero alguém me mostrar como fazer</option>
                <option value="2">Tento copiar soluções que já vi antes</option>
                <option value="3">Procuro diferentes maneiras de resolver</option>
                <option value="4">Crio minha própria forma de resolver</option>
            </select>

            <label>4. Se algo não dá certo na primeira tentativa, você:</label>
            <select id="question4" required>
                <option value="1">Desisto e faço outra coisa</option>
                <option value="2">Peço ajuda para alguém</option>
                <option value="3">Tento de novo de um jeito diferente</option>
                <option value="4">Faço vários testes até conseguir</option>
            </select>

            <!-- Construção Colaborativa -->
            <label>5. Durante um trabalho em grupo, você geralmente:</label>
            <select id="question5" required>
                <option value="1">Prefiro fazer sua parte sozinho</option>
                <option value="2">Aceita as ideias dos outros</option>
                <option value="3">Contribui com suas próprias ideias</option>
                <option value="4">Ajuda a juntar as ideias de todos</option>
            </select>

            <label>6. Quando um colega tem uma ideia diferente da sua:</label>
            <select id="question6" required>
                <option value="1">Prefiro manter minha ideia original</option>
                <option value="2">Escuto, mas sigo com minha ideia</option>
                <option value="3">Tento misturar as duas ideias</option>
                <option value="4">Conversamos para criar algo melhor juntos</option>
            </select>

            <!-- Pensamento Complexo -->
            <label>7. Ao criar algo novo, você:</label>
            <select id="question7" required>
                <option value="1">Prefiro usar apenas um tipo de material</option>
                <option value="2">Misturo alguns materiais diferentes</option>
                <option value="3">Gosto de combinar várias coisas</option>
                <option value="4">Adoro misturar materiais e técnicas diferentes</option>
            </select>

            <label>8. Quando está construindo um projeto:</label>
            <select id="question8" required>
                <option value="1">Sigo apenas um caminho do início ao fim</option>
                <option value="2">Faço pequenas mudanças no plano original</option>
                <option value="3">Experimento diferentes possibilidades</option>
                <option value="4">Combino várias ideias de formas diferentes</option>
            </select>

            <button type="submit">Enviar</button>
        </form>
        <div id="progress" class="hidden">
            <div class="progress-bar"></div>
        </div>
        <div id="result" class="hidden"></div>
    </div>
    <script src="students.js"></script>
</body>
</html>

student/students.js:
//students.js

// Função para aguardar o CONFIG
async function waitForConfig() {
    return new Promise((resolve) => {
        const checkConfig = () => {
            if (window.CONFIG) {
                resolve(window.CONFIG);
            } else {
                setTimeout(checkConfig, 100);
            }
        };
        checkConfig();
    });
}

let JSON_BIN_URL = "";
let MASTER_KEY = "";

// Array com todas as perguntas e suas opções
const questions = [
    // Curiosidade Artístico-Científica
    {
        id: 'question1',
        category: 'artistic_scientific_curiosity',
        text: 'Quando você vê algo interessante (objeto, experiência ou arte), você:',
        options: [
            { value: 1, text: 'Prefiro não mexer para não estragar' },
            { value: 2, text: 'Observo com atenção como funciona' },
            { value: 3, text: 'Pesquiso mais sobre o assunto' },
            { value: 4, text: 'Faço testes e experimentos para entender melhor' }
        ]
    },
    {
        id: 'question2',
        category: 'artistic_scientific_curiosity',
        text: 'Em uma feira de ciências, o que você mais gosta de fazer?',
        options: [
            { value: 1, text: 'Prefiro só assistir as apresentações' },
            { value: 2, text: 'Gosto de fazer anotações sobre o que vejo' },
            { value: 3, text: 'Faço perguntas sobre os projetos' },
            { value: 4, text: 'Adoro criar e apresentar experimentos' }
        ]
    },
    {
        id: 'question9',
        category: 'artistic_scientific_curiosity',
        text: 'Quando descobre uma nova tecnologia, você:',
        options: [
            { value: 1, text: 'Espero outros testarem primeiro' },
            { value: 2, text: 'Leio o manual básico antes de usar' },
            { value: 3, text: 'Exploro todas as funcionalidades' },
            { value: 4, text: 'Tento descobrir como funciona por dentro' }
        ]
    },

    // Intenção Criativa
    {
        id: 'question3',
        category: 'creative_intention',
        text: 'Quando precisa resolver um problema novo, você:',
        options: [
            { value: 1, text: 'Espero alguém me mostrar como fazer' },
            { value: 2, text: 'Tento copiar soluções que já vi antes' },
            { value: 3, text: 'Procuro diferentes maneiras de resolver' },
            { value: 4, text: 'Crio minha própria forma de resolver' }
        ]
    },
    {
        id: 'question4',
        category: 'creative_intention',
        text: 'Se algo não dá certo na primeira tentativa, você:',
        options: [
            { value: 1, text: 'Desisto e faço outra coisa' },
            { value: 2, text: 'Peço ajuda para alguém' },
            { value: 3, text: 'Tento de novo de um jeito diferente' },
            { value: 4, text: 'Faço vários testes até conseguir' }
        ]
    },
    {
        id: 'question10',
        category: 'creative_intention',
        text: 'Ao enfrentar um desafio criativo, você prefere:',
        options: [
            { value: 1, text: 'Seguir um tutorial passo a passo' },
            { value: 2, text: 'Adaptar ideias já existentes' },
            { value: 3, text: 'Misturar diferentes referências' },
            { value: 4, text: 'Criar algo totalmente original' }
        ]
    },

    // Construção Colaborativa
    {
        id: 'question5',
        category: 'collaborative_construction',
        text: 'Durante um trabalho em grupo, você geralmente:',
        options: [
            { value: 1, text: 'Prefiro fazer sua parte sozinho' },
            { value: 2, text: 'Aceita as ideias dos outros' },
            { value: 3, text: 'Contribui com suas próprias ideias' },
            { value: 4, text: 'Ajuda a juntar as ideias de todos' }
        ]
    },
    {
        id: 'question6',
        category: 'collaborative_construction',
        text: 'Quando um colega tem uma ideia diferente da sua:',
        options: [
            { value: 1, text: 'Prefiro manter minha ideia original' },
            { value: 2, text: 'Escuto, mas sigo com minha ideia' },
            { value: 3, text: 'Tento misturar as duas ideias' },
            { value: 4, text: 'Conversamos para criar algo melhor juntos' }
        ]
    },
    {
        id: 'question11',
        category: 'collaborative_construction',
        text: 'Em um projeto de equipe, você costuma:',
        options: [
            { value: 1, text: 'Esperar os outros tomarem a iniciativa' },
            { value: 2, text: 'Seguir as orientações do grupo' },
            { value: 3, text: 'Sugerir novas abordagens' },
            { value: 4, text: 'Coordenar e integrar as contribuições' }
        ]
    },

    // Pensamento Complexo
    {
        id: 'question7',
        category: 'complex_thinking',
        text: 'Ao criar algo novo, você:',
        options: [
            { value: 1, text: 'Prefiro usar apenas um tipo de material' },
            { value: 2, text: 'Misturo alguns materiais diferentes' },
            { value: 3, text: 'Gosto de combinar várias coisas' },
            { value: 4, text: 'Adoro misturar materiais e técnicas diferentes' }
        ]
    },
    {
        id: 'question8',
        category: 'complex_thinking',
        text: 'Quando está construindo um projeto:',
        options: [
            { value: 1, text: 'Sigo apenas um caminho do início ao fim' },
            { value: 2, text: 'Faço pequenas mudanças no plano original' },
            { value: 3, text: 'Experimento diferentes possibilidades' },
            { value: 4, text: 'Combino várias ideias de formas diferentes' }
        ]
    },
    {
        id: 'question12',
        category: 'complex_thinking',
        text: 'Ao analisar um problema complexo, você:',
        options: [
            { value: 1, text: 'Procuro a solução mais simples possível' },
            { value: 2, text: 'Considero algumas variáveis principais' },
            { value: 3, text: 'Analiso diversos aspectos do problema' },
            { value: 4, text: 'Busco conexões entre diferentes fatores' }
        ]
    },
    {
        id: 'question13',
        category: 'complex_thinking',
        text: 'Quando precisa tomar uma decisão importante:',
        options: [
            { value: 1, text: 'Decido rapidamente com o que sei' },
            { value: 2, text: 'Considero os prós e contras básicos' },
            { value: 3, text: 'Analiso diferentes perspectivas' },
            { value: 4, text: 'Crio mapas mentais com todas as possibilidades' }
        ]
    },
    // Letramento Tecnológico
    {
        id: 'question14',
        category: 'technological_literacy',
        text: 'Ao aprender a usar uma nova tecnologia ou software, você:',
        options: [
            { value: 1, text: 'Prefiro que alguém me mostre apenas o básico' },
            { value: 2, text: 'Sigo tutoriais passo a passo' },
            { value: 3, text: 'Exploro diferentes funcionalidades por conta própria' },
            { value: 4, text: 'Busco entender como a tecnologia funciona por dentro' }
        ]
    },
    {
        id: 'question15',
        category: 'technological_literacy',
        text: 'Quando encontra um erro ou problema em um sistema:',
        options: [
            { value: 1, text: 'Peço ajuda imediatamente' },
            { value: 2, text: 'Tento algumas soluções básicas' },
            { value: 3, text: 'Pesquiso diferentes formas de resolver' },
            { value: 4, text: 'Analiso o erro e desenvolvo soluções próprias' }
        ]
    },
    {
        id: 'question16',
        category: 'technological_literacy',
        text: 'Em relação ao processo de aprendizado de máquina:',
        options: [
            { value: 1, text: 'Prefiro usar sistemas já prontos' },
            { value: 2, text: 'Entendo o básico do funcionamento' },
            { value: 3, text: 'Consigo adaptar sistemas existentes' },
            { value: 4, text: 'Crio e modifico sistemas conforme necessário' }
        ]
    }
];

// Função para embaralhar array (algoritmo Fisher-Yates)
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

// Funções de criptografia
function encryptData(text, key) {
    return CryptoJS.AES.encrypt(text, key).toString();
}

function decryptData(encryptedText, key) {
    try {
        const bytes = CryptoJS.AES.decrypt(encryptedText, key);
        return bytes.toString(CryptoJS.enc.Utf8);
    } catch (error) {
        console.error('Erro ao descriptografar:', error);
        return 'Protegido';
    }
}

// Função para renderizar as perguntas
// Função para renderizar as perguntas
function renderQuestions() {
    const form = document.getElementById('studentForm');
    const submitButton = form.querySelector('button[type="submit"]');
    
    // Remove as perguntas existentes
    const existingQuestions = form.querySelectorAll('select[id^="question"]');
    existingQuestions.forEach(q => {
        const label = q.previousElementSibling;
        label.remove();
        q.remove();
    });
    
    // Embaralha as perguntas
    const shuffledQuestions = shuffleArray([...questions]);
    
    // Pega apenas 10 perguntas (2 de cada categoria)
    const selectedQuestions = {
        artistic_scientific_curiosity: [],
        creative_intention: [],
        collaborative_construction: [],
        complex_thinking: [],
        technological_literacy: [] // Adicionada nova categoria
    };
    
    shuffledQuestions.forEach(question => {
        if (selectedQuestions[question.category] && selectedQuestions[question.category].length < 2) {
            selectedQuestions[question.category].push(question);
        }
    });
    
    // Junta todas as perguntas selecionadas e embaralha novamente
    const finalQuestions = shuffleArray(Object.values(selectedQuestions).flat());
    
    // Insere as perguntas antes do botão submit
    finalQuestions.forEach((question, index) => {
        const label = document.createElement('label');
        // Adiciona número da questão dinamicamente
        label.textContent = `${index + 1}. ${question.text}`;
        
        const select = document.createElement('select');
        select.id = question.id;
        select.required = true;

        // Adiciona opção vazia inicial
        const defaultOption = document.createElement('option');
        defaultOption.value = "";
        defaultOption.textContent = "Selecione uma opção";
        select.appendChild(defaultOption);
        
        question.options.forEach(option => {
            const optionElement = document.createElement('option');
            optionElement.value = option.value;
            optionElement.textContent = option.text;
            select.appendChild(optionElement);
        });
        
        submitButton.parentNode.insertBefore(label, submitButton);
        submitButton.parentNode.insertBefore(select, submitButton);
    });
}
// Calcula o perfil do aluno com base nas respostas
function calculateStudentProfile(answers) {
    return {
        artistic_scientific_score: answers.artistic_scientific_curiosity,
        creative_intention_score: answers.creative_intention,
        collaborative_score: answers.collaborative_construction,
        complex_thinking_score: answers.complex_thinking,
        technological_literacy_score: answers.technological_literacy, // Nova pontuação
        raw_answers: answers,
    };
}

// Função para distribuir alunos nos grupos de forma heterogênea
function assignStudentToGroup(teacherData) {
    const groups = teacherData.groups;
    const maxStudentsPerGroup = 6;

    // Primeiro, encontra o grupo com menos alunos
    let leastCrowdedGroup = 'group1';
    let minStudents = groups['group1'] ? groups['group1'].length : 0;

    for (let i = 1; i <= 6; i++) {
        const groupName = `group${i}`;
        if (!groups[groupName]) {
            groups[groupName] = [];
        }
        if (groups[groupName].length < minStudents) {
            minStudents = groups[groupName].length;
            leastCrowdedGroup = groupName;
        }
    }

    return leastCrowdedGroup;
}

// Inicialização assíncrona
async function initializeApp() {
    try {
        const config = await waitForConfig();
        JSON_BIN_URL = config.JSON_BIN_URL;
        MASTER_KEY = config.MASTER_KEY;

        // Renderiza as perguntas
        renderQuestions();

        // Configura o formulário
        document.getElementById('studentForm').addEventListener('submit', async function (event) {
            event.preventDefault();

            const studentName = document.getElementById('studentName').value.trim();
            const teacherCode = document.getElementById('teacherCode').value.trim();

            if (!studentName || !teacherCode) {
                alert("Por favor, preencha todos os campos.");
                return;
            }

            // Coleta todas as perguntas selecionadas
            const selectedQuestions = document.querySelectorAll('select[id^="question"]');
            
            // Agrupa as respostas por categoria
            const answersByCategory = {
                artistic_scientific_curiosity: [],
                creative_intention: [],
                collaborative_construction: [],
                complex_thinking: [],
                technological_literacy: [] // Nova categoria
            };

            // Percorre todas as perguntas selecionadas e agrupa suas respostas
            selectedQuestions.forEach(select => {
                const questionId = select.id;
                const question = questions.find(q => q.id === questionId);
                if (question) {
                    answersByCategory[question.category].push(parseInt(select.value));
                }
            });

            // Calcula a média para cada categoria
            const answers = {
                artistic_scientific_curiosity: answersByCategory.artistic_scientific_curiosity.reduce((a, b) => a + b, 0) / 2,
                creative_intention: answersByCategory.creative_intention.reduce((a, b) => a + b, 0) / 2,
                collaborative_construction: answersByCategory.collaborative_construction.reduce((a, b) => a + b, 0) / 2,
                complex_thinking: answersByCategory.complex_thinking.reduce((a, b) => a + b, 0) / 2,
                technological_literacy: answersByCategory.technological_literacy.reduce((a, b) => a + b, 0) / 2
            };

            const profile = calculateStudentProfile(answers);

            // Mostrar barra de progresso
            const progress = document.getElementById('progress');
            const progressBar = document.querySelector('.progress-bar');
            progress.classList.remove('hidden');
            progressBar.style.width = '50%';

            try {
                // Obter os dados existentes e distribuir em grupos
                const response = await axios.get(`${JSON_BIN_URL}/latest`, {
                    headers: { "X-Master-Key": MASTER_KEY },
                });
                
                let data = response.data.record;

                // Garante que a estrutura de grupos e perfis do professor exista
                // E use o código criptografado nas operações
                if (!data[teacherCode]) {
                    data[teacherCode] = {
                        groups: {
                            group1: [],
                            group2: [],
                            group3: [],
                            group4: [],
                            group5: [],
                            group6: []
                        },
                    };
                }

                // Distribui o aluno em um grupo
                const assignedGroup = assignStudentToGroup(data[teacherCode]);

                // Adiciona o aluno ao grupo designado
                data[teacherCode].groups[assignedGroup].push({
                    name: encryptData(studentName, MASTER_KEY),
                    profile: profile,
                });

                // Envia os dados atualizados
                await axios.put(JSON_BIN_URL, data, {
                    headers: {
                        "Content-Type": "application/json",
                        "X-Master-Key": MASTER_KEY,
                    },
                });

                progressBar.style.width = '100%';
                document.getElementById('studentForm').classList.add('hidden');
                document.getElementById('result').classList.remove('hidden');
                document.getElementById('result').innerHTML = "Obrigado! Suas respostas foram registradas.";
            } catch (error) {
                console.error("Erro ao processar formulário:", error);
                alert("Erro ao salvar os dados. Por favor, tente novamente.");
                progress.classList.add('hidden');
                progressBar.style.width = '0';
            }
        });

    } catch (error) {
        console.error('Erro ao inicializar:', error);
    }
}

// Inicia quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', initializeApp);

student/styles.css:
/*styles.css de student*/
body {
    font-family: 'Segoe UI', Arial, sans-serif;
    background-image: linear-gradient(45deg, #f3f4f6 25%, transparent 25%),
                      linear-gradient(-45deg, #f3f4f6 25%, transparent 25%),
                      linear-gradient(45deg, transparent 75%, #f3f4f6 75%),
                      linear-gradient(-45deg, transparent 75%, #f3f4f6 75%);
    background-size: 20px 20px;
    background-color: #ffffff;
    margin: 0;
    padding: 20px;
    min-height: 100vh;
}

.container {
    max-width: 600px;
    margin: auto;
    background: rgba(255, 255, 255, 0.95);
    padding: 30px;
    border-radius: 20px;
    box-shadow: 0 8px 32px rgba(31, 38, 135, 0.15);
    backdrop-filter: blur(4px);
    border: 1px solid rgba(255, 255, 255, 0.18);
}

h1, h2 {
    color: #1a365d;
    text-align: center;
    margin-bottom: 25px;
    position: relative;
    padding-bottom: 15px;
}

h1::after, h2::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 4px;
    background: linear-gradient(90deg, #4CAF50, #45a049);
    border-radius: 2px;
}

label {
    margin-top: 15px;
    display: block;
    font-weight: 600;
    color: #2d3748;
    margin-bottom: 8px;
}

input, select {
    width: 100%;
    padding: 12px;
    margin: 10px 0;
    border: 2px solid #e2e8f0;
    border-radius: 10px;
    font-size: 1em;
    transition: all 0.3s ease;
    box-sizing: border-box;
}

input:focus, select:focus {
    outline: none;
    border-color: #4CAF50;
    box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
}

button {
    width: 100%;
    padding: 15px;
    background: linear-gradient(45deg, #4CAF50, #45a049);
    color: white;
    font-size: 1.1em;
    font-weight: 600;
    border: none;
    border-radius: 50px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    position: relative;
    overflow: hidden;
    margin: 15px 0;
}

button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
        120deg,
        transparent,
        rgba(255, 255, 255, 0.3),
        transparent
    );
    transition: 0.5s;
}

button:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
}

button:hover::before {
    left: 100%;
}

button:active {
    transform: translateY(0);
    box-shadow: 0 2px 10px rgba(76, 175, 80, 0.3);
}

.hidden {
    display: none;
}

/* Barra de progresso */
#progress {
    width: 100%;
    background-color: #f8f9fa;
    border: 1px solid #e2e8f0;
    border-radius: 10px;
    margin-top: 25px;
    overflow: hidden;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
}

.progress-bar {
    width: 0;
    height: 24px;
    background: linear-gradient(45deg, #4CAF50, #45a049);
    transition: width 0.4s ease;
    position: relative;
    overflow: hidden;
}

.progress-bar::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
        90deg,
        rgba(255, 255, 255, 0.1),
        rgba(255, 255, 255, 0.2),
        rgba(255, 255, 255, 0.1)
    );
    animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
    0% {
        transform: translateX(-100%);
    }
    100% {
        transform: translateX(100%);
    }
}

styles.css:
/* Reset básico */
body, h1, p, button {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Estilo geral */
body {
    font-family: 'Segoe UI', Arial, sans-serif;
    background-image: linear-gradient(45deg, #f3f4f6 25%, transparent 25%),
                      linear-gradient(-45deg, #f3f4f6 25%, transparent 25%),
                      linear-gradient(45deg, transparent 75%, #f3f4f6 75%),
                      linear-gradient(-45deg, transparent 75%, #f3f4f6 75%);
    background-size: 20px 20px;
    background-color: #ffffff;
    color: #333;
    margin: 0;
    padding: 20px;
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* Container principal */
.container {
    background: rgba(255, 255, 255, 0.95);
    padding: 30px;
    border-radius: 20px;
    box-shadow: 0 8px 32px rgba(31, 38, 135, 0.15);
    backdrop-filter: blur(4px);
    width: 90%;
    max-width: 1000px;
    border: 1px solid rgba(255, 255, 255, 0.18);
}

/* Título */
h1 {
    font-size: 2.5em;
    color: #1a365d;
    margin-bottom: 25px;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
    position: relative;
    padding-bottom: 15px;
}

h1::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 4px;
    background: linear-gradient(90deg, #4CAF50, #45a049);
    border-radius: 2px;
}

/* Container das competências */
.competency-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 25px;
    margin: 40px 0;
}

.competency-card {
    background: white;
    padding: 25px;
    border-radius: 15px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid rgba(0, 0, 0, 0.05);
}

.competency-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

.competency-card h2 {
    color: #2d3748;
    font-size: 1.25em;
    margin-bottom: 15px;
    position: relative;
    padding-bottom: 10px;
}

.competency-card h2::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 50px;
    height: 3px;
    background: #4CAF50;
    border-radius: 1.5px;
}

/* Botões */
.button-container {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin-top: 30px;
}

button {
    background: linear-gradient(45deg, #4CAF50, #45a049);
    color: white;
    padding: 15px 30px;
    border: none;
    border-radius: 50px;
    font-size: 1.1em;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
    position: relative;
    overflow: hidden;
}

button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
        120deg,
        transparent,
        rgba(255, 255, 255, 0.3),
        transparent
    );
    transition: 0.5s;
}

button:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
}

button:hover::before {
    left: 100%;
}

button:active {
    transform: translateY(0);
    box-shadow: 0 2px 10px rgba(76, 175, 80, 0.3);
}

/* Modal */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(5px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background: white;
    padding: 30px;
    border-radius: 20px;
    width: 90%;
    max-width: 450px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
    transform: scale(0.9);
    opacity: 0;
    animation: modalAppear 0.3s forwards;
    position: relative;
}

.close-button {
    position: absolute;
    top: 15px;
    right: 15px;
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
    padding: 5px;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    box-shadow: none;
    transition: background-color 0.3s ease;
}

.close-button:hover {
    background-color: rgba(0, 0, 0, 0.1);
    transform: none;
    box-shadow: none;
}

.close-button::before {
    display: none;
}

@keyframes modalAppear {
    to {
        transform: scale(1);
        opacity: 1;
    }
}

.modal-content input {
    width: 100%;
    padding: 12px;
    margin: 15px 0;
    border: 2px solid #e2e8f0;
    border-radius: 10px;
    font-size: 1em;
    transition: border-color 0.3s ease;
}

.modal-content input:focus {
    outline: none;
    border-color: #4CAF50;
    box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
}

.modal-buttons {
    display: flex;
    gap: 15px;
    justify-content: center;
    margin-top: 20px;
}

/* Responsividade */
@media (max-width: 768px) {
    .button-container {
        flex-direction: column;
        align-items: center;
    }

    button {
        width: 100%;
        max-width: 300px;
    }

    .competency-container {
        grid-template-columns: 1fr;
    }
}

.hidden {
    display: none;
}

teacher/styles.css:
/*styles.css de teachers*/
/* Reset e estilos base */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-image: linear-gradient(45deg, #f3f4f6 25%, transparent 25%),
                      linear-gradient(-45deg, #f3f4f6 25%, transparent 25%),
                      linear-gradient(45deg, transparent 75%, #f3f4f6 75%),
                      linear-gradient(-45deg, transparent 75%, #f3f4f6 75%);
    background-size: 20px 20px;
    background-color: #ffffff;
    margin: 0;
    padding: 20px;
    min-height: 100vh;
}

.hidden {
    display: none !important;
}

.container {
    max-width: 800px;
    margin: 20px auto;
    background: rgba(255, 255, 255, 0.95);
    padding: 30px;
    border-radius: 20px;
    box-shadow: 0 8px 32px rgba(31, 38, 135, 0.15);
    backdrop-filter: blur(4px);
    border: 1px solid rgba(255, 255, 255, 0.18);
}

/* Cabeçalhos */
h1 {
    color: #1a365d;
    text-align: center;
    font-size: 2.5em;
    margin-bottom: 30px;
    position: relative;
    padding-bottom: 15px;
}

h1::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 4px;
    background: linear-gradient(90deg, #4CAF50, #45a049);
    border-radius: 2px;
}

h2 {
    color: #2d3748;
    text-align: center;
    font-size: 1.5em;
    margin: 20px 0;
}

#teacherCode {
    background: linear-gradient(45deg, #4CAF50, #45a049);
    color: white;
    padding: 8px 20px;
    border-radius: 25px;
    font-size: 0.9em;
    display: inline-block;
    box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
}

/* Grid de grupos */
#groupMap {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
    padding: 20px 0;
    max-width: 100%;
}

/* Estilo dos grupos */
#groupMap > div {
    background: white;
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    border: 1px solid rgba(0, 0, 0, 0.05);
}

#groupMap > div:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
}

/* Cabeçalhos dos grupos */
h3 {
    color: #2d3748;
    margin: 0 0 15px 0;
    padding: 12px;
    background: #f8f9fa;
    border-radius: 10px;
    text-align: center;
    font-size: 1.2em;
    border-left: 4px solid #4CAF50;
    word-wrap: break-word;
}

/* Lista de alunos ajustada */
ul {
    list-style: none;
    padding: 0;
    margin: 0;
    max-height: 300px;
    overflow-y: auto;
}

/* Estilo dos itens da lista */
li {
    padding: 12px 15px;
    margin: 8px 0;
    background: #f8f9fa;
    border-radius: 10px;
    color: #2d3748;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: space-between;
    word-wrap: break-word;
    overflow-wrap: break-word;
    max-width: 100%;
    border: 1px solid rgba(0, 0, 0, 0.05);
}

li:before {
    content: '•';
    color: #4CAF50;
    font-weight: bold;
    margin-right: 10px;
}

li:hover {
    background: #edf2f7;
    transform: translateX(5px);
}

/* Estiliza a barra de rolagem */
ul::-webkit-scrollbar {
    width: 8px;
}

ul::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

ul::-webkit-scrollbar-thumb {
    background: #4CAF50;
    border-radius: 4px;
}

ul::-webkit-scrollbar-thumb:hover {
    background: #45a049;
}

/* Ajuste para botões de ação */
button.action-btn {
    margin-left: 10px;
    padding: 8px;
    font-size: 1.2em;
    border: none;
    background: none;
    cursor: pointer;
    transition: all 0.3s ease;
    border-radius: 50%;
}

button.action-btn:hover {
    transform: scale(1.2);
    background: rgba(0, 0, 0, 0.05);
}

button.remove-btn i {
    color: #e74c3c;
}

button.rename-btn i {
    color: #f39c12;
}

button.migrate-btn i {
    color: #4CAF50;
}

/* Modal */
#modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(5px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-content {
    background: white;
    padding: 30px;
    border-radius: 20px;
    width: 90%;
    max-width: 450px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
    transform: scale(0.9);
    opacity: 0;
    animation: modalAppear 0.3s forwards;
}

@keyframes modalAppear {
    to {
        transform: scale(1);
        opacity: 1;
    }
}

.modal-content h3 {
    color: #2d3748;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 2px solid #e2e8f0;
}

#groupSelect {
    width: 100%;
    padding: 12px;
    border: 2px solid #e2e8f0;
    border-radius: 10px;
    font-size: 16px;
    color: #2d3748;
    background-color: white;
    margin: 15px 0;
    transition: all 0.3s ease;
}

#groupSelect:focus {
    outline: none;
    border-color: #4CAF50;
    box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
}

/* Botões do Modal */
.modal-buttons {
    display: flex;
    gap: 15px;
    margin-top: 20px;
}

#submitMigration, #cancelMigration {
    flex: 1;
    padding: 12px 20px;
    border: none;
    border-radius: 50px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
}

#submitMigration {
    background: linear-gradient(45deg, #4CAF50, #45a049);
    color: white;
    box-shadow: 0 4px 15px rgba(76, 175, 80, 0.3);
}

#cancelMigration {
    background: linear-gradient(45deg, #e74c3c, #c0392b);
    color: white;
    box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
}

#submitMigration:hover, #cancelMigration:hover {
    transform: translateY(-3px);
}

#submitMigration:hover {
    box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4);
}

#cancelMigration:hover {
    box-shadow: 0 6px 20px rgba(231, 76, 60, 0.4);
}

/* Barra de progresso */
#progress {
    width: 100%;
    background-color: #f8f9fa;
    border: 1px solid #e2e8f0;
    border-radius: 10px;
    margin-top: 25px;
    overflow: hidden;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
}

.progress-bar {
    width: 0;
    height: 24px;
    background: linear-gradient(45deg, #4CAF50, #45a049);
    transition: width 0.4s ease;
    position: relative;
    overflow: hidden;
}

.progress-bar::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
        90deg,
        rgba(255, 255, 255, 0.1),
        rgba(255, 255, 255, 0.2),
        rgba(255, 255, 255, 0.1)
    );
    animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
    0% {
        transform: translateX(-100%);
    }
    100% {
        transform: translateX(100%);
    }
}

/* Responsividade */
@media (max-width: 768px) {
    .container {
        padding: 15px;
        margin: 10px;
    }

    h1 {
        font-size: 2em;
    }

    #groupMap {
        grid-template-columns: 1fr;
    }
    
    .modal-content {
        width: 95%;
        margin: 10px;
        padding: 20px;
    }
}

/* Estilos para o resumo de habilidades */
.skills-summary {
    display: flex;
    justify-content: space-around;
    padding: 10px;
    margin: 0 0 15px 0;
    background: linear-gradient(to right, #f8f9fa, #ffffff);
    border-radius: 10px;
    border: 1px solid rgba(0, 0, 0, 0.05);
}

.skill-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 5px;
    padding: 8px;
    border-radius: 8px;
    transition: all 0.3s ease;
    cursor: help;
}

.skill-item:hover {
    background: rgba(76, 175, 80, 0.1);
    transform: translateY(-2px);
}

.skill-item i {
    font-size: 1.2em;
    color: #4CAF50;
    margin-bottom: 2px;
}

.skill-item span {
    font-size: 0.9em;
    font-weight: 600;
    color: #2d3748;
}

/* Cores específicas para cada tipo de habilidade */
.skill-item:nth-child(1) i { color: #3498db; } /* Artístico-Científico */
.skill-item:nth-child(2) i { color: #f1c40f; } /* Criativo */
.skill-item:nth-child(3) i { color: #e67e22; } /* Colaborativo */
.skill-item:nth-child(4) i { color: #9b59b6; } /* Complexo */
.skill-item:nth-child(5) i { color: #1abc9c; } /* Letramento Tecnológico */

/* Ajuste para telas menores */
@media (max-width: 400px) {
    .skills-summary {
        flex-wrap: wrap;
        gap: 10px;
    }
    
    .skill-item {
        flex: 1 1 40%;
        min-width: 70px;
    }
}

teacher/teachers.html:
<!DOCTYPE html>
<!--teachers.html-->
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Área do Professor</title>
    <link rel="stylesheet" href="styles.css">
    <!-- Importação do Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <script type="module" src="../config.js"></script>
</head>
<body>
    <div class="container">
        <h1>Mapa de Grupos</h1>
        <h2>Seu código de professor: <span id="teacherCode"></span></h2>
        <div id="groupMap"></div>
    </div>

    <!-- Modal para migração -->
    <div id="modal" class="hidden">
        <div class="modal-content">
            <h3>Migrar Usuário</h3>
            <select id="groupSelect">
                <!-- Opções serão adicionadas dinamicamente -->
            </select>
            <button id="submitMigration">Enviar</button>
            <button id="cancelMigration">Cancelar</button>
        </div>
    </div>

    <!-- Barra de progresso -->
    <div id="progress" class="hidden">
        <div class="progress-bar"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="teachers.js"></script>
</body>
</html>


teacher/teachers.js:
// Função para aguardar o CONFIG
async function waitForConfig() {
    return new Promise((resolve) => {
        const checkConfig = () => {
            if (window.CONFIG) {
                resolve(window.CONFIG);
            } else {
                setTimeout(checkConfig, 100);
            }
        };
        checkConfig();
    });
}

let JSON_BIN_URL = "";
let MASTER_KEY = "";
let lastUpdate = null;
let updateInterval = null;
let cachedData = null;

const teacherCode = localStorage.getItem('teacherCode');
const groupMap = document.getElementById('groupMap');
const modal = document.getElementById('modal');
const groupSelect = document.getElementById('groupSelect');
const progress = document.getElementById('progress');
const progressBar = document.querySelector('.progress-bar');

// Funções de criptografia
function encryptData(text, key) {
    return CryptoJS.AES.encrypt(text, key).toString();
}

function decryptData(encryptedText, key) {
    try {
        const bytes = CryptoJS.AES.decrypt(encryptedText, key);
        return bytes.toString(CryptoJS.enc.Utf8);
    } catch (error) {
        console.error('Erro ao descriptografar:', error);
        return 'Protegido';
    }
}

// Função para calcular a média das habilidades do grupo
function calculateGroupSkills(students) {
    if (students.length === 0) return null;
    
    const totalScores = students.reduce((acc, student) => {
        acc.artistic += student.profile.artistic_scientific_score || 0;
        acc.creative += student.profile.creative_intention_score || 0;
        acc.collaborative += student.profile.collaborative_score || 0;
        acc.complex += student.profile.complex_thinking_score || 0;
        acc.tech += student.profile.technological_literacy_score || 0;
        return acc;
    }, { artistic: 0, creative: 0, collaborative: 0, complex: 0, tech: 0 });

    return {
        artistic: (totalScores.artistic / students.length).toFixed(1),
        creative: (totalScores.creative / students.length).toFixed(1),
        collaborative: (totalScores.collaborative / students.length).toFixed(1),
        complex: (totalScores.complex / students.length).toFixed(1),
        tech: (totalScores.tech / students.length).toFixed(1)
    };
}

// Função para verificar se os dados mudaram
function dataHasChanged(newData, oldData) {
    if (!oldData) return true;
    return JSON.stringify(newData) !== JSON.stringify(oldData);
}

// Função para atualizar os dados com throttle
async function updateGroups() {
    try {
        // Limita as requisições a no mínimo 5 segundos de intervalo
        const now = Date.now();
        if (lastUpdate && now - lastUpdate < 5000) {
            return;
        }

        const response = await axios.get(`${JSON_BIN_URL}/latest`, {
            headers: { "X-Master-Key": MASTER_KEY },
        });
        

        const record = response.data.record;
        lastUpdate = now;

        // Só atualiza o DOM se houver mudanças
        if (dataHasChanged(record[teacherCode], cachedData)) {
            cachedData = record[teacherCode];
            renderGroupsFromData(record, teacherCode);
        }
    } catch (error) {
        console.error("Erro ao atualizar dados:", error);
        clearInterval(updateInterval);
        updateInterval = setInterval(updateGroups, 10000);
    }
}

// Função para renderizar os grupos a partir dos dados
function renderGroupsFromData(record, teacherCode) {
    if (record[teacherCode] && record[teacherCode].groups) {
        const groups = record[teacherCode].groups;
        groupMap.innerHTML = Object.keys(groups)
            .map((group) => {
                const skills = calculateGroupSkills(groups[group]);
                const skillsHtml = skills ? `
                    <div class="skills-summary">
                        <div class="skill-item" title="Curiosidade Artístico-Científica">
                            <i class="fas fa-microscope"></i>
                            <span>${skills.artistic}</span>
                        </div>
                        <div class="skill-item" title="Intenção Criativa">
                            <i class="fas fa-lightbulb"></i>
                            <span>${skills.creative}</span>
                        </div>
                        <div class="skill-item" title="Construção Colaborativa">
                            <i class="fas fa-users"></i>
                            <span>${skills.collaborative}</span>
                        </div>
                        <div class="skill-item" title="Pensamento Complexo">
                            <i class="fas fa-brain"></i>
                            <span>${skills.complex}</span>
                        </div>
                        <div class="skill-item" title="Letramento Tecnológico">
                            <i class="fas fa-laptop-code"></i>
                            <span>${skills.tech}</span>
                        </div>
                    </div>` : '';

                return `
                    <div class="group-card">
                        <h3>${group.toUpperCase()}</h3>
                        ${skillsHtml}
                        <ul>
                            ${groups[group]
                            .map(
                                (student, index) => `
                                <li>
                                    <span class="student-name">${decryptData(student.name, MASTER_KEY)}</span>
                                    <div class="action-buttons">
                                        <button class="action-btn remove-btn" onclick="removeUser('${group}', ${index})" title="Remover">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                        <button class="action-btn rename-btn" onclick="renameUser('${group}', ${index})" title="Renomear">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="action-btn migrate-btn" onclick="openMigrationModal('${group}', ${index})" title="Migrar">
                                            <i class="fas fa-exchange-alt"></i>
                                        </button>
                                    </div>
                                </li>`
                            )
                            .join('')}
                        </ul>
                    </div>`;
            })
            .join("");
    } else {
        groupMap.innerHTML = "<p>Nenhum grupo foi criado ainda.</p>";
    }
}

// Função para lidar com mudanças de visibilidade da página
function handleVisibilityChange() {
    if (document.hidden) {
        clearInterval(updateInterval);
    } else {
        updateGroups(); // Atualiza imediatamente quando voltar
        updateInterval = setInterval(updateGroups, 5000);
    }
}

// Inicializa as funções para manipulação dos grupos
async function initializeGroupFunctions() {
    // Função para remover usuário
    window.removeUser = async function(group, index) {
        try {
            const response = await axios.get(`${JSON_BIN_URL}/latest`, {
                headers: { "X-Master-Key": MASTER_KEY },
            });
            const data = response.data;
            data.record[teacherCode].groups[group].splice(index, 1);
            await axios.put(JSON_BIN_URL, data, {
                headers: {
                    "Content-Type": "application/json",
                    "X-Master-Key": MASTER_KEY,
                },
            });
            cachedData = data.record[teacherCode];
            renderGroupsFromData(data.record);
        } catch (error) {
            console.error("Erro ao remover usuário:", error);
        }
    };

    // Função para renomear usuário
    window.renameUser = async function(group, index) {
        const newName = prompt("Digite o novo nome:");
        if (!newName) return;

        try {
            const response = await axios.get(`${JSON_BIN_URL}/latest`, {
                headers: { "X-Master-Key": MASTER_KEY },
            });
            const data = response.data;
            // Criptografa o novo nome antes de salvar
            data.record[teacherCode].groups[group][index].name = encryptData(newName, MASTER_KEY);
            await axios.put(JSON_BIN_URL, data, {
                headers: {
                    "Content-Type": "application/json",
                    "X-Master-Key": MASTER_KEY,
                },
            });
            cachedData = data.record[teacherCode];
            renderGroupsFromData(data.record);
        } catch (error) {
            console.error("Erro ao renomear usuário:", error);
        }
    };

    // Função para abrir modal de migração
    window.openMigrationModal = async function(group, index) {
        try {
            const response = await axios.get(`${JSON_BIN_URL}/latest`, {
                headers: { "X-Master-Key": MASTER_KEY },
            });
            const groups = response.data.record[teacherCode].groups;
            groupSelect.innerHTML = Object.keys(groups)
                .filter((g) => g !== group)
                .map((g) => `<option value="${g}">${g.toUpperCase()}</option>`)
                .join("");

            window.migrationData = {
                group,
                index,
                student: groups[group][index]
            };
            modal.classList.remove('hidden');
        } catch (error) {
            console.error("Erro ao abrir modal:", error);
        }
    };
}

// Inicialização assíncrona
async function initializeApp() {
    try {
        const config = await waitForConfig();
        JSON_BIN_URL = config.JSON_BIN_URL;
        MASTER_KEY = config.MASTER_KEY;

        document.getElementById('teacherCode').textContent = teacherCode || "Código não encontrado.";

        // Inicializa funções dos grupos
        await initializeGroupFunctions();

        // Configuração inicial de atualização
        await updateGroups();
        updateInterval = setInterval(updateGroups, 5000);

        // Adiciona listener para visibilidade da página
        document.addEventListener('visibilitychange', handleVisibilityChange);

        // Configurar o botão de submissão da migração
        document.getElementById('submitMigration').addEventListener('click', async () => {
            const newGroup = groupSelect.value;
            if (!newGroup) return;

            progress.classList.remove('hidden');
            progressBar.style.width = '50%';

            try {
                const response = await axios.get(`${JSON_BIN_URL}/latest`, {
                    headers: { "X-Master-Key": MASTER_KEY },
                });
                const data = response.data;

                const student = data.record[teacherCode].groups[window.migrationData.group]
                    .splice(window.migrationData.index, 1)[0];
                data.record[teacherCode].groups[newGroup].push(student);

                await axios.put(JSON_BIN_URL, data, {
                    headers: {
                        "Content-Type": "application/json",
                        "X-Master-Key": MASTER_KEY,
                    },
                });

                cachedData = data.record[teacherCode];
                renderGroupsFromData(data.record);

                progressBar.style.width = '100%';
                setTimeout(() => {
                    progress.classList.add('hidden');
                    progressBar.style.width = '0';
                    modal.classList.add('hidden');
                }, 1000);
            } catch (error) {
                console.error("Erro ao migrar usuário:", error);
                alert("Erro ao realizar a migração. Tente novamente.");
            }
        });

        // Configura botão de cancelar migração
        document.getElementById('cancelMigration').addEventListener('click', () => {
            modal.classList.add('hidden');
        });

    } catch (error) {
        console.error('Erro ao inicializar:', error);
    }
}

// Quando a página for fechada ou ocultada
window.addEventListener('beforeunload', () => {
    clearInterval(updateInterval);
});

// Chama a inicialização quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', () => {
    modal.classList.add('hidden');
    progress.classList.add('hidden');
    initializeApp();
});

